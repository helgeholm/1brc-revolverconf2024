# Explain 1BRC, show webpage why not

# Show basic solution

# Run once on server, talk during
- explain custom constraints
- explain what solution does
- what to look out for: when do we break idiomacy? when to we work directly against the standard library? against the language itself?
- How Go optimizer works and refuses to work

# Change to 100m size

```
inputFile := "measurements_100m.txt"
```
Run Basic 100m

# pprof

```
import...
"runtime/pprof"

main()...
if os.Getenv("PROFILE") != "" {
	profFileName := os.Args[0] + ".prof"
	fmt.Fprintln(os.Stderr, "### profiling enabled")
	pfile, err := os.Create(profFileName)
	if err != nil { panic(err) }
	defer pfile.Close()
	pprof.StartCPUProfile(pfile)
	defer func() {
		pprof.StopCPUProfile()
		fmt.Fprintln(os.Stderr, "### Profiling done, run:\ngo tool pprof", os.Args[0], profFileName)
	}()
}
```

Fuck yeah look at that malloc

# Reuse datastructure

```
results := make(map[string]*StationData)

if entry, found := results[stationName]; found {
	entry.maximum = max(entry.maximum, measurement)
	entry.minimum = min(entry.minimum, measurement)
	entry.sum += measurement
	entry.count += 1
	// results[stationName] = StationData{
	// 	maximum: max(entry.maximum, measurement),
	// 	minimum: min(entry.minimum, measurement),
	// 	sum:     entry.sum + measurement,
	// 	count:   entry.count + 1,
	// }
} else {
```

Run Mutable Data

# turn float to int

```
for k, v := range results {
	countLines += v.count
	fmt.Printf("%s;%.1f;%.1f;%.1f\n",
	k, 0.1 * float64(v.minimum), 0.1 * float64(v.sum) / float64(v.count), 0.1 * float64(v.maximum))
}

measurementString := split[1]
measurement := Decimal1_64(0)
sign := int64(1)
for _, c := range measurementString {
	if c == '-' {
		sign = -1
	} else if c != '.' {
		measurement = 10 * measurement + int64(c-'0');
	}
}
measurement *= sign
```

# mmap

```
import... bytes, syscall

main()...
	data := mmapFile(inputFile)

	results, err := parseLines(data)

...
func parseLines(data []byte) (map[string]*StationData, error) {
	results := make(map[string]*StationData)
	scanner := bufio.NewScanner(bytes.NewBuffer(data))
	for scanner.Scan() {

...
func mmapFile(filename string) ([]byte) {
	f, err := os.Open(filename)
	if err != nil { panic(err) }
	defer f.Close()
	fi, err := f.Stat()
	if err != nil { panic(err) }
	size := fi.Size()
	data, err := syscall.Mmap(
		int(f.Fd()),
		0,
		int(size)+8,
		syscall.PROT_READ,
		syscall.MAP_SHARED|syscall.MAP_POPULATE,
	)
	if err != nil { panic(err) }
	if err := syscall.Madvise(data, syscall.MADV_SEQUENTIAL); err != nil {
		panic(err)
	}
	return data[0:len(data)-8]
}
```

Run: mmap

# use less strings

```
line := scanner.Bytes()
split := bytes.IndexByte(line, ';')
stationName := line[:split]
measurementString := line[split+1:]
```

Run: less stringy

# DO ANOTHER PROFILING

# Custom hash (xxhash)

```
for _, v := range results {
	fmt.Printf("%s;%.1f;%.1f;%.1f\n",
		v.name, 0.1*float64(v.minimum), 0.1*float64(v.sum)/float64(v.count), 0.1*float64(v.maximum))
}

results := make(map[uint64]*StationData)
...
id := xxhash.Sum64(stationName)

...
if entry, found := results[id]; found {
	entry.maximum = max(entry.maximum, measurement)
	entry.minimum = min(entry.minimum, measurement)
	entry.sum += measurement
	entry.count += 1
} else {
	results[id] = &StationData{
		name: string(stationName),

```

# Open address hashmap with linear probing

```
type ProcessedResults struct {
	items [32768]StationData
}

func (p *ProcessedResults) get(id uint64) (*StationData, *StationData) {
	index := uint16(id) >> 1
	if p.items[index].count == 0 {
		return nil, &p.items[index]
	}
	for {
		if p.items[index].id == id {
			return &p.items[index], nil
		}
		index = (index + 1) % 32768
		if p.items[index].count == 0 {
			return nil, &p.items[index]
		}
	}
}

func (p *ProcessedResults) entries() iter.Seq[*StationData] {
	return func(yield func(*StationData) bool) {
		 for i := range p.items {
		 	if p.items[i].count != 0 {
				if !yield(&p.items[i]) {
					return;
				}
			}
		 }
	}
}

...
for v := range results.entries() {

...
item, newItem := results.get(id)
if newItem != nil {
	newItem.name = string(stationName)
	newItem.id = id
	newItem.minimum = measurement
	newItem.maximum = measurement
	newItem.sum = measurement
	newItem.count = 1
} else {
	item.maximum = max(item.maximum, measurement)
	item.minimum = min(item.minimum, measurement)
	item.sum += measurement
	item.count += 1
}

```

Run: open linear probe

# temperature lookup table

```
decimalLookup := [65536]int16{}
for i := range(1000) {
	s := fmt.Sprintf("%d.%d\n", i/10, i%10)
	b := []byte(s)
	asInt := (*uint32)(unsafe.Pointer(&b[0]))
	coolBits := *asInt & 0x0f0f0f0f
	folded := uint16(coolBits) | uint16(coolBits >> 12)
	skip := int16(len(s) << 10)
	decimalLookup[folded] = int16(i) | skip
}

....
var measurement int16
if measurementString[0] == '-' {
	asInt := (*uint32)(unsafe.Pointer(&measurementString[1]))
	coolBits := *asInt & 0x0f0f0f0f
	folded := uint16(coolBits) | uint16(coolBits >> 12)
	measurement = -(lookup[folded]&0x3ff)
} else {
	asInt := (*uint32)(unsafe.Pointer(&measurementString[0]))
	coolBits := *asInt & 0x0f0f0f0f
	folded := uint16(coolBits) | uint16(coolBits >> 12)
	measurement = lookup[folded]&0x3ff
}

Run: lookup table

```

# go through bytes meself

```
pos := 0
for pos < len(data) {
	split := bytes.IndexByte(data[pos:], ';')
	stationName := data[pos:pos+split]
	id := xxhash.Sum64(stationName)
	pos += split + 1

	var measurement int16
	if data[pos] == '-' {
		pos += 1
		asInt := (*uint32)(unsafe.Pointer(&data[pos]))
		coolBits := *asInt & 0x0f0f0f0f
		folded := uint16(coolBits) | uint16(coolBits >> 12)
		num := lookup[folded]
		measurement = -(num&0x3ff)
		pos += int(num >> 10)
	} else {
		asInt := (*uint32)(unsafe.Pointer(&data[pos]))
		coolBits := *asInt & 0x0f0f0f0f
		folded := uint16(coolBits) | uint16(coolBits >> 12)
		num := lookup[folded]
		measurement = num&0x3ff
		pos += int(num >> 10)
	}
```

# custom ;-detector detectDelimiter

```
func detectDelimiter(data *byte) uint64 {
	n := *(*uint64)(unsafe.Pointer(data)) ^ (';' * 0x0101010101010101)
	return (n - 0x0101010101010101) &^ n & 0x8080808080808080
}

....

lineStart := pos
for detectDelimiter(&data[pos]) == 0 {
	pos += 8
}
for data[pos] != ';' {
	pos += 1
}
split := pos
stationName := data[lineStart:split]
id := xxhash.Sum64(stationName)
pos += 1

```

objdump -d -S program | less

# lscpu gir avx2 og mmx

# insane usage of ;-detector value

```
skipToDelim:
for {
	skip := detectDelimiter(&data[pos])
	switch skip & 0xffffffff {
		case 0x80000000:
			pos += 3
			break skipToDelim
		case 0x00800000:
			pos += 2
			break skipToDelim
		case 0x00008000:
			pos += 1
			break skipToDelim
		case 0x00000080:
			break skipToDelim
	}
	switch skip >> 32 {
		case 0x80000000:
			pos += 7
			break skipToDelim
		case 0x00800000:
			pos += 6
			break skipToDelim
		case 0x00008000:
			pos += 5
			break skipToDelim
		case 0x00000080:
			pos += 4
			break skipToDelim
	}
	pos += 8
}
```

# parallelize

```
datas := partitionData(mmapFile(inputFile))
results := ProcessedResults{}
resultsCh := make(chan *ProcessedResults)
for _, data := range datas {
 	go func() {
		results := ProcessedResults{}
		parseLines(&results, &decimalLookup, data)
		resultsCh <- &results
	}()
}
for range datas {
	q := <-resultsCh
	for i := range q.items {
		if q.items[i].count == 0 {
			continue
		}
		if rItem, newItem := results.get(q.items[i].id); newItem != nil {
			*newItem = q.items[i]
		} else {
			rItem.count += q.items[i].count
			rItem.sum += q.items[i].sum
			rItem.minimum = min(rItem.minimum, q.items[i].minimum)
			rItem.maximum = max(rItem.maximum, q.items[i].maximum)
		}
	}
}

...

func partitionData(data []byte) [][]byte {
	n := runtime.NumCPU()
	partitions := make([][]byte, n)
	partitionSize := len(data) / n
	prevEnd := 0
	for i := range n {
		start := prevEnd
		end := max(start, partitionSize*(i+1))
		if i == n - 1 {
			end = len(data)
		} else {
			for data[end-1] != '\n' {
				end += 1
			}
		}
		prevEnd = end
		partitions[i] = data[start:end]
	}
	return partitions
}
```

Run: parallel

######### to try?

OKAY NOW LOOK AT ZIG

